package com.example.android.popularmovies.MovieUtils;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;

import javax.net.ssl.HttpsURLConnection;

public class NetworkUtils {

    //TODO please, insert your api key here
    private final static String API_KEY = "API_KEY_GOES_HERE";

    private final static String BASE_URL = "https://api.themoviedb.org/3/movie";
    private final static String IMAGE_BASE_URL = " http://image.tmdb.org/t/p/";

    private final static String QUERY_PARAM_API_KEY = "api_key";

    public final static String MOST_POPULAR_ORDER = "popular";
    public final static String TOP_RATED_ORDER = "top_rated";

    public final static String IMAGE_SIZE_STANDART = "w185";
    public final static String IMAGE_SIZE_ORIGINAL = "original";

    /**
     * This method builds URL for request to the movie database site. Response to this URL should be
     * data on movies in some sorted order (for now most popular movies order, and top rated movies order)
     * @param sortOrder - is a sort order for movies
     * @return - is an URL for request
     */
    public static URL buildUrl(String sortOrder) {

        if (!sortOrder.equals(MOST_POPULAR_ORDER) && !sortOrder.equals(TOP_RATED_ORDER)) {
            return null;
        }

        Uri resource = Uri.parse(BASE_URL).buildUpon()
                            .appendPath(sortOrder)
                            .appendQueryParameter(QUERY_PARAM_API_KEY, API_KEY)
                            .build();
        URL url;
        try {
            url = new URL(resource.toString());
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        }
        return url;
    }

    /**
     * this method generate URL to retrive image (poster) from the movie database site
     * @param size - size must be "w92", "w154", "w185", "w342", "w500", "w780", or "original"
     *             there are also two constants within the class that specifies w185(standart) and
     *             original size for image.
     * @param image - path for the image
     * @return - URL for the image
     */
    public static URL buildImageUrl(String size, String image) {
        Uri imageResource = Uri.parse(IMAGE_BASE_URL).buildUpon()
                                        .appendPath(size)
                                        .appendEncodedPath(image).build();
        URL url;
        try {
            url = new URL(imageResource.toString());
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        }
        return url;
    }

    /**
     * this method gets JSON response from the movie database server
     * @param url - is an URL generated by buildUrl function or manually (request to server for movie data)
     * @return - json response from the movie database server
     * @throws IOException
     */
    public static String getJSONResponseFromUrl(URL url) throws IOException{
        HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
        try {
            InputStream responseStream = urlConnection.getInputStream();

            Scanner scanner = new Scanner(responseStream);
            scanner.useDelimiter("\\A");

            if (scanner.hasNext()) {
                return scanner.next();
            } else {
                return null;
            }
        } catch (IOException e) {
            return null;
        } finally {
            urlConnection.disconnect();
        }
    }

    public static boolean isConnected(Context context) {
        ConnectivityManager cm =
                (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        return activeNetwork.isConnectedOrConnecting();
    }
}
